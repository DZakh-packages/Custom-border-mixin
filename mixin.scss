@function border-construtor($side, $size, $gap, $color, $start) {
  $section: $size + $gap;
  @return (
    bg-image: (
      linear-gradient(direction-builder($side, $start), gradient-builder($size, $section, $color))
    ),
    bg-size: (
      $section $size
    ),
    bg-position: (
      position-builder($side, $start)
    ),
    bg-repeat: (
      repeat-builder($side)
    )
  );
}

@function gradient-builder($length, $section, $color) {
  @return $color, $color ($length / $section * 100%), transparent ($length / $section * 100%);
}

@function direction-builder($side, $start) {
  @if $start == 'opposite' {
    @if $side == 'top' {
      @return to right;
    } @else if $side == 'right' {
      @return to bottom;
    } @else if $side == 'left' {
      @return to top;
    } @else {
      @return to left;
    }
  } @else {
    @if $side == 'top' {
      @return to left;
    } @else if $side == 'right' {
      @return to top;
    } @else if $side == 'left' {
      @return to bottom;
    } @else {
      @return to right;
    }
  }
}

@function position-builder($side, $start) {
  @if $start == 'center' {
    @return $side;
  } @else if $start == 'opposite' {
    @if $side == 'top' {
      @return 0 0;
    } @else if $side == 'right' {
      @return 100% 0;
    } @else if $side == 'left' {
      @return 0 100%;
    } @else {
      @return 100% 100%;
    }
  } @else {
    @if $side == 'top' {
      @return 100% 0;
    } @else if $side == 'right' {
      @return 100% 100%;
    } @else if $side == 'left' {
      @return 0 0;
    } @else {
      @return 0 100%;
    }
  }
}

@function repeat-builder($side) {
  @if $side == 'right' or $side == 'left' {
    @return repeat-y;
  } @else {
    @return repeat-x;
  }
}

@function dotted-top($size: 1px, $gap: 5px, $color: #333, $start: origin) {
  @return border-construtor(top, $size, $gap, $color, $start);
}
@function dotted-right($size: 1px, $gap: 5px, $color: #333, $start: origin) {
  @return border-construtor(right, $size, $gap, $color, $start);
}
@function dotted-bottom($size: 1px, $gap: 5px, $color: #333, $start: origin) {
  @return border-construtor(bottom, $size, $gap, $color, $start);
}
@function dotted-left($size: 1px, $gap: 5px, $color: #333, $start: origin) {
  @return border-construtor(left, $size, $gap, $color, $start);
}
// @function bd-all($size: 1px, $gap: 5px, $color: #333) {
//   @return bd-horizontal($size, $gap, $color), bd-vertical($size, $gap, $color);
// }
// @function bd-horizontal($size: 1px, $gap: 5px, $color: #333) {
//   @return bd-right($size, $gap, $color), bd-left($size, $gap, $color);
// }
// @function bd-vertical($size: 1px, $gap: 5px, $color: #333) {
//   @return (top, $size, $gap, $color), (top, $size, $gap, $color);
// }

@mixin custom-border($borders...) {
  $bg-image-list: ();
  $bg-position-list: ();
  $bg-size-list: ();
  $bg-repeat-list: ();

  @each $border in $borders {
    $bg-image-list: append($bg-image-list, map-get($border, bg-image), 'comma');
    $bg-size-list: append($bg-size-list, map-get($border, bg-size), 'comma');
    $bg-position-list: append($bg-position-list, map-get($border, bg-position), 'comma');
    $bg-repeat-list: append($bg-repeat-list, map-get($border, bg-repeat), 'comma');
  }

  background-image: $bg-image-list;
  background-size: $bg-size-list;
  background-position: $bg-position-list;
  background-repeat: $bg-repeat-list;
}
