@function border-construtor($parameters) {
  $border-defaults: (
    side: bottom,
    size: 1px,
    length: 1px,
    gap: 5px,
    color: #333,
    start: origin
  );
  @each $key, $value in $parameters {
    @if $value == _ {
      $parameters: map-merge(
        $parameters,
        (
          $key: map-get($border-defaults, $key)
        )
      );
    }
  }
  $side: map-get($parameters, side);
  $size: map-get($parameters, size);
  $length: map-get($parameters, length);
  $gap: map-get($parameters, gap);
  $color: map-get($parameters, color);
  $start: map-get($parameters, start);
  @if $size < 0 or $gap < 0 or $length < 0 {
    @error "Size, length, and gap properties cannot be negative.";
  }
  $section: $length + $gap;
  @return (
    bg-image: (
      linear-gradient(direction-builder($side, $start), gradient-builder($length, $section, $color))
    ),
    bg-size: (
      size-builder($side, $size, $section)
    ),
    bg-position: (
      position-builder($side, $start)
    ),
    bg-repeat: (
      repeat-builder($side)
    )
  );
}

@function gradient-builder($length, $section, $color) {
  @return $color, $color ($length / $section * 100%), transparent ($length / $section * 100%);
}

@function direction-builder($side, $start) {
  @if $start == 'origin' or $start == 'center' {
    @if $side == 'bottom' {
      @return to right;
    } @else if $side == 'top' {
      @return to left;
    } @else if $side == 'right' {
      @return to top;
    } @else if $side == 'left' {
      @return to bottom;
    } @else {
      @error "Side property doesn't work as intended";
    }
  } @else if $start == 'opposite' {
    @if $side == 'bottom' {
      @return to left;
    } @else if $side == 'top' {
      @return to right;
    } @else if $side == 'right' {
      @return to bottom;
    } @else if $side == 'left' {
      @return to top;
    } @else {
      @error "Side property doesn't work as intended";
    }
  } @else {
    @error "Property #{$start} must be either origin, center, or opposite.";
  }
}

@function position-builder($side, $start) {
  @if $start == 'center' {
    @return $side;
  } @else if $start == 'origin' {
    @if $side == 'bottom' {
      @return 0 100%;
    } @else if $side == 'top' {
      @return 100% 0;
    } @else if $side == 'right' {
      @return 100% 100%;
    } @else if $side == 'left' {
      @return 0 0;
    } @else {
      @error "Side property doesn't work as intended";
    }
  } @else if $start == 'opposite' {
    @if $side == 'bottom' {
      @return 100% 100%;
    } @else if $side == 'top' {
      @return 0 0;
    } @else if $side == 'right' {
      @return 100% 0;
    } @else if $side == 'left' {
      @return 0 100%;
    } @else {
      @error "Side property doesn't work as intended";
    }
  } @else {
    @error "Property #{$start} must be either origin, center, or opposite.";
  }
}

@function repeat-builder($side) {
  @if $side == 'top' or $side == 'bottom' {
    @return repeat-x;
  } @else if $side == 'right' or $side == 'left' {
    @return repeat-y;
  } @else {
    @error "Side property doesn't work as intended";
  }
}

@function size-builder($side, $size, $section) {
  @if $side == 'top' or $side == 'bottom' {
    @return $section $size;
  } @else if $side == 'right' or $side == 'left' {
    @return $size $section;
  } @else {
    @error "Side property doesn't work as intended";
  }
}

@function dotted-top($size: _, $gap: _, $color: _, $start: _) {
  @return border-construtor(
    (
      side: top,
      size: $size,
      length: $size,
      gap: $gap,
      color: $color,
      start: $start
    )
  );
}
@function dotted-right($size: _, $gap: _, $color: _, $start: _) {
  @return border-construtor(
    (
      side: right,
      size: $size,
      length: $size,
      gap: $gap,
      color: $color,
      start: $start
    )
  );
}
@function dotted-bottom($size: _, $gap: _, $color: _, $start: _) {
  @return border-construtor(
    (
      side: bottom,
      size: $size,
      length: $size,
      gap: $gap,
      color: $color,
      start: $start
    )
  );
}
@function dotted-left($size: _, $gap: _, $color: _, $start: _) {
  @return border-construtor(
    (
      side: left,
      size: $size,
      length: $size,
      gap: $gap,
      color: $color,
      start: $start
    )
  );
}
@function dotted-horizontal($size: _, $gap: _, $color: _, $start: _) {
  @return dotted-right($size, $gap, $color, $start), dotted-left($size, $gap, $color, $start);
}
@function dotted-vertical($size: _, $gap: _, $color: _, $start: _) {
  @return dotted-top($size, $gap, $color, $start), dotted-bottom($size, $gap, $color, $start);
}
@function dotted($size: _, $gap: _, $color: _, $start: _) {
  @return dotted-top($size, $gap, $color, $start), dotted-right($size, $gap, $color, $start),
    dotted-bottom($size, $gap, $color, $start), dotted-left($size, $gap, $color, $start);
}

@function dashed-top($size: _, $length: _, $gap: _, $color: _, $start: _) {
  @return border-construtor(
    (
      side: top,
      size: $size,
      length: $length,
      gap: $gap,
      color: $color,
      start: $start
    )
  );
}
@function dashed-right($size: _, $length: _, $gap: _, $color: _, $start: _) {
  @return border-construtor(
    (
      side: right,
      size: $size,
      length: $length,
      gap: $gap,
      color: $color,
      start: $start
    )
  );
}
@function dashed-bottom($size: _, $length: _, $gap: _, $color: _, $start: _) {
  @return border-construtor(
    (
      side: bottom,
      size: $size,
      length: $length,
      gap: $gap,
      color: $color,
      start: $start
    )
  );
}
@function dashed-left($size: _, $length: _, $gap: _, $color: _, $start: _) {
  @return border-construtor(
    (
      side: left,
      size: $size,
      length: $length,
      gap: $gap,
      color: $color,
      start: $start
    )
  );
}
@function dashed-horizontal($size: _, $length: _, $gap: _, $color: _, $start: _) {
  @return dashed-right($size, $length, $gap, $color, $start),
    dashed-left($size, $length, $gap, $color, $start);
}
@function dashed-vertical($size: _, $length: _, $gap: _, $color: _, $start: _) {
  @return dashed-top($size, $length, $gap, $color, $start),
    dashed-bottom($size, $length, $gap, $color, $start);
}
@function dashed($size: _, $length: _, $gap: _, $color: _, $start: _) {
  @return dashed-top($size, $length, $gap, $color, $start),
    dashed-right($size, $length, $gap, $color, $start),
    dashed-bottom($size, $length, $gap, $color, $start),
    dashed-left($size, $length, $gap, $color, $start);
}

@mixin custom-border($borders...) {
  $bg-image-list: ();
  $bg-position-list: ();
  $bg-size-list: ();
  $bg-repeat-list: ();

  @each $border-list in $borders {
    @if type-of($border-list) == list {
      @each $border in $border-list {
        $bg-image-list: append($bg-image-list, map-get($border, bg-image), 'comma');
        $bg-size-list: append($bg-size-list, map-get($border, bg-size), 'comma');
        $bg-position-list: append($bg-position-list, map-get($border, bg-position), 'comma');
        $bg-repeat-list: append($bg-repeat-list, map-get($border, bg-repeat), 'comma');
      }
    } @else {
      $border: $border-list;
      $bg-image-list: append($bg-image-list, map-get($border, bg-image), 'comma');
      $bg-size-list: append($bg-size-list, map-get($border, bg-size), 'comma');
      $bg-position-list: append($bg-position-list, map-get($border, bg-position), 'comma');
      $bg-repeat-list: append($bg-repeat-list, map-get($border, bg-repeat), 'comma');
    }
  }

  background-image: $bg-image-list;
  background-size: $bg-size-list;
  background-position: $bg-position-list;
  background-repeat: $bg-repeat-list;
}
